// Copyright 2015 Marc-Antoine Ruel. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"
)

// Globals

var goDirsCacheLock sync.Mutex
var goDirsCache map[bool][]string

var relToGOPATHLock sync.Mutex
var relToGOPATHCache = map[string]string{}

// TODO(maruel): Reimplement this in go instead of processing it in bash.
var preCommitHook = []byte(`#!/bin/sh
# Copyright 2015 Marc-Antoine Ruel. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

# pre-commit git hook to runs presubmit.py on the tree with unstaged changes
# removed.
#
# WARNING: This file was generated by tool "pre-commit-go"


# Redirect output to stderr.
exec 1>&2


run_checks() {
  # Ensure everything is either tracked or ignored. This is because git stash
  # doesn't stash untracked files.
  untracked="$(git ls-files --others --exclude-standard)"
  if [ "$untracked" != "" ]; then
    echo "This check refuses to run if there is an untracked file. Either track"
    echo "it or put it in the .gitignore or your global exclusion list:"
    echo "$untracked"
    return 1
  fi

  # Run the presubmit check.
  pre-commit-go run
  result=$?
  if [ $result != 0 ]; then
    return $result
  fi
}


if git rev-parse --verify HEAD >/dev/null 2>&1
then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi


# Use a precise "stash, run checks, unstash" to ensure that the check is
# properly run on the data in the index.
# Inspired from
# http://stackoverflow.com/questions/20479794/how-do-i-properly-git-stash-pop-in-pre-commit-hooks-to-get-a-clean-working-tree
# First, stash index and work dir, keeping only the to-be-committed changes in
# the working directory.
old_stash=$(git rev-parse -q --verify refs/stash)
git stash save -q --keep-index
new_stash=$(git rev-parse -q --verify refs/stash)

# If there were no changes (e.g., '--amend' or '--allow-empty') then nothing was
# stashed, and we should skip everything, including the tests themselves.
# (Presumably the tests passed on the previous commit, so there is no need to
# re-run them.)
if [ "$old_stash" = "$new_stash" ]; then
  exit 0
fi

run_checks
result=$?

# Restore changes.
git reset --hard -q && git stash apply --index -q && git stash drop -q
exit $result
`)

var helpText = `pre-commit-go: runs pre-commit checks on Go projects.

Supported commands are:
  help        - this page
  install     - install the git commit hook as .git/hooks/pre-commit
  prereq      - install prerequisites: errcheck, golint, goimports, govet
  run         - run all checks
	writeconfig - write (or rewrite) a pre-commit-go.json

When executed without command, it does the equivalent of prereq, install then
run.

Supported flags are:
  -verbose

Supported checks:
- go build
- go test -race
- go test -cover
- gofmt -s
- goimports
- errcheck
- go tool vet
- golint

No check ever modify any file.
`

// Code

func readDirNames(dirname string) []string {
	f, err := os.Open(dirname)
	if err != nil {
		return nil
	}
	names, err := f.Readdirnames(-1)
	_ = f.Close()
	return names
}

// captureWd runs an executable from a directory returns the output, exit code
// and error if appropriate.
func captureWd(wd string, args ...string) (string, int, error) {
	exitCode := -1
	log.Printf("capture(%s)", args)
	c := exec.Command(args[0], args[1:]...)
	if wd != "" {
		c.Dir = wd
	}
	out, err := c.CombinedOutput()
	if c.ProcessState != nil {
		if waitStatus, ok := c.ProcessState.Sys().(syscall.WaitStatus); ok {
			exitCode = waitStatus.ExitStatus()
			if exitCode != 0 {
				err = nil
			}
		}
	}
	// TODO(maruel): Handle code page on Windows.
	return string(out), exitCode, err
}

// capture runs an executable and returns the output, exit code and error if
// appropriate.
func capture(args ...string) (string, int, error) {
	return captureWd("", args...)
}

// captureAbs returns an absolute path of whatever a git command returned.
func captureAbs(args ...string) (string, error) {
	out, code, _ := capture(args...)
	if code != 0 {
		return "", fmt.Errorf("failed to run \"%s\"", strings.Join(args, " "))
	}
	path, err := filepath.Abs(strings.TrimSpace(out))
	log.Printf("captureAbs(%s) = %s", args, path)
	return path, err
}

// reverse reverses a string.
func reverse(s string) string {
	n := len(s)
	runes := make([]rune, n)
	for _, rune := range s {
		n--
		runes[n] = rune
	}
	return string(runes[n:])
}

func rsplitn(s, sep string, n int) []string {
	items := strings.SplitN(reverse(s), sep, n)
	l := len(items)
	for i := 0; i < l/2; i++ {
		j := l - i - 1
		items[i], items[j] = reverse(items[j]), reverse(items[i])
	}
	if l&1 != 0 {
		i := l / 2
		items[i] = reverse(items[i])
	}
	return items
}

// goDirs returns the list of directories with '*.go' files or '*_test.go'
// files, depending on value of 'tests'.
func goDirs(tests bool) []string {
	goDirsCacheLock.Lock()
	defer goDirsCacheLock.Unlock()
	if goDirsCache != nil {
		return goDirsCache[tests]
	}
	root, _ := os.Getwd()
	if stat, err := os.Stat(root); err != nil || !stat.IsDir() {
		panic("internal failure")
	}

	dirsSourceFound := map[string]bool{}
	dirsTestsFound := map[string]bool{}
	var recurse func(dir string)
	recurse = func(dir string) {
		for _, f := range readDirNames(dir) {
			if f[0] == '.' || f[0] == '_' {
				continue
			}
			p := filepath.Join(dir, f)
			stat, err := os.Stat(p)
			if err != nil {
				continue
			}
			if stat.IsDir() {
				recurse(p)
			} else {
				if strings.HasSuffix(p, "_test.go") {
					dirsTestsFound[dir] = true
				} else if strings.HasSuffix(p, ".go") {
					dirsSourceFound[dir] = true
				}
			}
		}
	}
	recurse(root)
	goDirsCache = map[bool][]string{
		false: make([]string, 0, len(dirsSourceFound)),
		true:  make([]string, 0, len(dirsTestsFound)),
	}
	for d := range dirsSourceFound {
		goDirsCache[false] = append(goDirsCache[false], d)
	}
	for d := range dirsTestsFound {
		goDirsCache[true] = append(goDirsCache[true], d)
	}
	sort.Strings(goDirsCache[false])
	sort.Strings(goDirsCache[true])
	//log.Printf("goDirs() = %v", goDirsCache)
	return goDirsCache[tests]
}

// relToGOPATH returns the path relative to $GOPATH/src.
func relToGOPATH(p string) (string, error) {
	relToGOPATHLock.Lock()
	defer relToGOPATHLock.Unlock()
	if rel, ok := relToGOPATHCache[p]; ok {
		return rel, nil
	}
	for _, gopath := range filepath.SplitList(os.Getenv("GOPATH")) {
		if len(gopath) == 0 {
			continue
		}
		srcRoot := filepath.Join(gopath, "src")
		// TODO(maruel): Accept case-insensitivity on Windows/OSX, maybe call
		// filepath.EvalSymlinks().
		if !strings.HasPrefix(p, srcRoot) {
			continue
		}
		rel, err := filepath.Rel(srcRoot, p)
		if err != nil {
			return "", fmt.Errorf("failed to find relative path from %s to %s", srcRoot, p)
		}
		relToGOPATHCache[p] = rel
		//log.Printf("relToGOPATH(%s) = %s", p, rel)
		return rel, err
	}
	return "", fmt.Errorf("failed to find GOPATH relative directory for %s", p)
}

// Checks.

type CheckPrerequisite struct {
	HelpCommand      []string
	ExpectedExitCode int
	URL              string
}

type Check interface {
	enabled() bool
	maxDuration() float64
	name() string
	run() error
	prerequisites() []CheckPrerequisite
}

// CheckCommon defines the common properties of a check.
type CheckCommon struct {
	Enabled     bool    `json:"enabled"`
	MaxDuration float64 `json:"maxduration"` // In seconds. Default to MaxDuration at global scope.
}

func (c *CheckCommon) enabled() bool {
	return c.Enabled
}

func (c *CheckCommon) maxDuration() float64 {
	return c.MaxDuration
}

// Native checks.

// Build builds everything inside the current directory via 'go build ./...'.
type Build struct {
	CheckCommon
	Tags []string `json:"tags"`
}

func (b *Build) name() string {
	return "build"
}

func (b *Build) prerequisites() []CheckPrerequisite {
	return nil
}

func (b *Build) run() error {
	tags := b.Tags
	if len(tags) == 0 {
		tags = []string{""}
	}
	for _, tag := range tags {
		args := []string{"go", "build"}
		if len(tag) != 0 {
			args = append(args, "-tags", tag)
		}
		args = append(args, "./...")
		out, _, err := capture(args...)
		if len(out) != 0 {
			return fmt.Errorf("%s failed: %s", strings.Join(args, " "), out)
		}
		if err != nil {
			return fmt.Errorf("%s failed: %s", strings.Join(args, " "), err.Error())
		}
	}
	return nil
}

// Gofmt runs gofmt in check mode with code simplification enabled.
// It is *almost* redundant with goimports except for '-s' which goimports
// doesn't implement.
type Gofmt struct {
	CheckCommon
}

func (g *Gofmt) name() string {
	return "gofmt"
}

func (g *Gofmt) prerequisites() []CheckPrerequisite {
	return nil
}

func (g *Gofmt) run() error {
	// gofmt doesn't return non-zero even if some files need to be updated.
	out, _, err := capture("gofmt", "-l", "-s", ".")
	if len(out) != 0 {
		return fmt.Errorf("these files are improperly formmatted, please run: gofmt -w -s .\n%s", out)
	}
	if err != nil {
		return fmt.Errorf("gofmt -l -s . failed: %s", err)
	}
	return nil
}

// Test runs all tests.
type Test struct {
	CheckCommon
	ExtraArgs []string `json:"extraargs"` // Additional arguments to pass, like -race.
	Tags      []string `json:"tags"`      // Used to run the tests N times with N tags set.
}

func (t *Test) name() string {
	return "test"
}

func (t *Test) prerequisites() []CheckPrerequisite {
	return nil
}

func (t *Test) run() error {
	// Add tests manually instead of using './...'. The reason is that it permits
	// running all the tests concurrently, which saves a lot of time when there's
	// many packages.
	var wg sync.WaitGroup
	testDirs := goDirs(true)
	tags := t.Tags
	if len(tags) == 0 {
		tags = []string{""}
	}
	for _, tag := range tags {
		errs := make(chan error, len(testDirs))
		for _, td := range testDirs {
			wg.Add(1)
			go func(testDir string) {
				defer wg.Done()
				rel, err := relToGOPATH(testDir)
				if err != nil {
					errs <- err
					return
				}
				args := []string{"go", "test"}
				args = append(args, t.ExtraArgs...)
				if len(tag) != 0 {
					args = append(args, "-tags", tag)
				}
				args = append(args, rel)
				out, exitCode, _ := capture(args...)
				if exitCode != 0 {
					errs <- fmt.Errorf("%s failed:\n%s", strings.Join(args, " "), out)
				}
			}(td)
		}
		wg.Wait()
		select {
		case err := <-errs:
			return err
		default:
		}
	}
	return nil
}

// Non-native checks.

// Errcheck runs errcheck on all directories containing .go files.
type Errcheck struct {
	CheckCommon
	Ignores string `json:"ignores"`
}

func (e *Errcheck) name() string {
	return "errcheck"
}

func (e *Errcheck) prerequisites() []CheckPrerequisite {
	return []CheckPrerequisite{
		{[]string{"errcheck", "-h"}, 2, "github.com/kisielk/errcheck"},
	}
}

func (e *Errcheck) run() error {
	dirs := goDirs(false)
	args := make([]string, 0, len(dirs)+2)
	args = append(args, "errcheck", "-ignore", e.Ignores)
	for _, d := range dirs {
		rel, err := relToGOPATH(d)
		if err != nil {
			return err
		}
		args = append(args, rel)
	}
	out, _, err := capture(args...)
	if len(out) != 0 {
		return fmt.Errorf("%s failed:\n%s", strings.Join(args, " "), out)
	}
	if err != nil {
		return fmt.Errorf("%s failed: %s", strings.Join(args, " "), err)
	}
	return nil
}

// Goimports runs goimports in check mode.
type Goimports struct {
	CheckCommon
}

func (g *Goimports) name() string {
	return "goimports"
}

func (g *Goimports) prerequisites() []CheckPrerequisite {
	return []CheckPrerequisite{
		{[]string{"goimports", "-h"}, 2, "golang.org/x/tools/cmd/goimports"},
	}
}

func (g *Goimports) run() error {
	// goimports doesn't return non-zero even if some files need to be updated.
	out, _, err := capture("goimports", "-l", ".")
	if len(out) != 0 {
		return fmt.Errorf("these files are improperly formmatted, please run: goimports -w .\n%s", out)
	}
	if err != nil {
		return fmt.Errorf("goimports -w . failed: %s", err)
	}
	return nil
}

// Golint runs golint.
// There starts the cheezy part that may return false positives. I'm sorry
// David.
type Golint struct {
	CheckCommon
	Blacklist []string `json:"blacklist"`
}

func (g *Golint) name() string {
	return "golint"
}

func (g *Golint) prerequisites() []CheckPrerequisite {
	return []CheckPrerequisite{
		{[]string{"golint", "-h"}, 2, "github.com/golang/lint/golint"},
	}
}

func (g *Golint) run() error {
	// golint doesn't return non-zero ever.
	out, _, _ := capture("golint", "./...")
	result := []string{}
	for _, line := range strings.Split(string(out), "\n") {
		for _, b := range g.Blacklist {
			if strings.Contains(line, b) {
				continue
			}
		}
		result = append(result, line)
	}
	if len(result) == 0 {
		return errors.New(strings.Join(result, "\n"))
	}
	return nil
}

// Govet runs "go tool vet".
type Govet struct {
	CheckCommon
	Blacklist []string `json:"blacklist"`
}

func (g *Govet) name() string {
	return "govet"
}

func (g *Govet) prerequisites() []CheckPrerequisite {
	return []CheckPrerequisite{
		{[]string{"go", "tool", "vet", "-h"}, 1, "golang.org/x/tools/cmd/vet"},
	}
}

func (g *Govet) run() error {
	// Ignore the return code since we ignore many errors.
	out, _, _ := capture("go", "tool", "vet", "-all", ".")
	result := []string{}
	for _, line := range strings.Split(string(out), "\n") {
		for _, b := range g.Blacklist {
			if strings.Contains(line, b) {
				continue
			}
		}
		result = append(result, line)
	}
	if len(result) == 0 {
		return errors.New(strings.Join(result, "\n"))
	}
	return nil
}

// TestCoverage runs all tests with coverage.
type TestCoverage struct {
	CheckCommon
	Minimum float64 `json:"minimum"`
}

func (t *TestCoverage) name() string {
	return "testcoverage"
}

func (t *TestCoverage) prerequisites() []CheckPrerequisite {
	toInstall := []CheckPrerequisite{
		{[]string{"go", "tool", "cover", "-h"}, 1, "golang.org/x/tools/cmd/cover"},
	}
	if len(os.Getenv("TRAVIS_JOB_ID")) != 0 {
		toInstall = append(toInstall, CheckPrerequisite{[]string{"goveralls", "-h"}, 2, "github.com/mattn/goveralls"})
	}
	return toInstall
}

func (t *TestCoverage) run() (err error) {
	pkgRoot, _ := os.Getwd()
	pkg, err2 := relToGOPATH(pkgRoot)
	if err2 != nil {
		return err2
	}
	testDirs := goDirs(true)
	if len(testDirs) == 0 {
		return nil
	}

	tmpDir, err2 := ioutil.TempDir("", "pre-commit-go")
	if err2 != nil {
		return err2
	}
	defer func() {
		err2 := os.RemoveAll(tmpDir)
		if err == nil {
			err = err2
		}
	}()

	// This part is similar to Test.run() except that it passes a unique
	// -coverprofile file name, so that all the files can later be merged into a
	// single file.
	var wg sync.WaitGroup
	errs := make(chan error, len(testDirs))
	for i, td := range testDirs {
		wg.Add(1)
		go func(index int, testDir string) {
			defer wg.Done()
			args := []string{
				"go", "test", "-v", "-covermode=count", "-coverpkg", pkg + "/...",
				"-coverprofile", filepath.Join(tmpDir, fmt.Sprintf("test%d.cov", index)),
			}
			out, exitCode, _ := captureWd(testDir, args...)
			if exitCode != 0 {
				errs <- fmt.Errorf("%s %s failed:\n%s", strings.Join(args, " "), testDir, out)
			}
		}(i, td)
	}
	wg.Wait()

	// Merge the profiles. Sums all the counts.
	// Format is "file.go:XX.YY,ZZ.II J K"
	// J is number of statements, K is count.
	files, err2 := filepath.Glob(filepath.Join(tmpDir, "test*.cov"))
	if err2 != nil {
		return err2
	}
	if len(files) == 0 {
		select {
		case err2 := <-errs:
			return err2
		default:
			return errors.New("no coverage found")
		}
	}
	counts := map[string]int{}
	for _, file := range files {
		f, err2 := os.Open(file)
		if err2 != nil {
			return err2
		}
		s := bufio.NewScanner(f)
		// Strip the first line.
		s.Scan()
		count := 0
		for s.Scan() {
			items := rsplitn(s.Text(), " ", 2)
			count, err2 = strconv.Atoi(items[1])
			if err2 != nil {
				break
			}
			counts[items[0]] += int(count)
		}
		f.Close()
		if err2 != nil {
			return err2
		}
	}
	profilePath := filepath.Join(tmpDir, "profile.cov")
	f, err2 := os.Create(profilePath)
	if err2 != nil {
		return err2
	}
	stms := make([]string, 0, len(counts))
	for k := range counts {
		stms = append(stms, k)
	}
	sort.Strings(stms)
	_, _ = io.WriteString(f, "mode: count\n")
	for _, stm := range stms {
		fmt.Fprintf(f, "%s %d\n", stm, counts[stm])
	}
	f.Close()

	// Analyze the results.
	out, _, err2 := capture("go", "tool", "cover", "-func", profilePath)
	type fn struct {
		loc  string
		name string
	}
	coverage := map[fn]float64{}
	var total float64
	for i, line := range strings.Split(out, "\n") {
		if i == 0 || len(line) == 0 {
			// First or last line.
			continue
		}
		items := strings.SplitN(line, "\t", 2)
		loc := items[0]
		if len(items) == 1 {
			panic(fmt.Sprintf("%#v %#v", line, items))
		}
		items = strings.SplitN(strings.TrimLeft(items[1], "\t"), "\t", 2)
		name := items[0]
		percentStr := strings.TrimLeft(items[1], "\t")
		percent, err2 := strconv.ParseFloat(percentStr[:len(percentStr)-1], 64)
		if err2 != nil {
			return fmt.Errorf("malformed coverage file")
		}
		if loc == "total:" {
			total = percent
		} else {
			coverage[fn{loc, name}] = percent
		}
	}
	if total < t.Minimum {
		partial := 0
		for _, percent := range coverage {
			if percent < 100. {
				partial++
			}
		}
		err2 = fmt.Errorf("code coverage: %3.1f%%; %d untested functions", total, partial)
	}
	if err2 == nil {
		select {
		case err2 = <-errs:
		default:
		}
	}

	// Sends to coveralls.io if applicable.
	if len(os.Getenv("TRAVIS_JOB_ID")) != 0 {
		// Make sure to have registered to https://coveralls.io first!
		out, _, err3 := capture("goveralls", "-coverprofile", profilePath)
		fmt.Printf("%s", out)
		if err2 == nil {
			err2 = err3
		}
	}
	return err2
}

// CustomCheck represents a user configured check.
type CustomCheck struct {
	CheckCommon
	Name          string              `json:"name"`          // Check display name.
	Command       []string            `json:"command"`       // Check command line.
	CheckExitCode bool                `json:"checkexitcode"` // Check fails if exit code is non-zero.
	Prerequisites []CheckPrerequisite `json:"prerequisites"`
}

func (c *CustomCheck) name() string {
	return c.Name
}

func (c *CustomCheck) prerequisites() []CheckPrerequisite {
	return c.Prerequisites
}

func (c *CustomCheck) run() error {
	out, exitCode, err := capture(c.Command...)
	if exitCode != 0 && c.CheckExitCode {
		return fmt.Errorf("%d failed:\n%s", strings.Join(c.Command, " "), out)
	}
	return err
}

// Configuration.

type Config struct {
	MaxDuration float64 `json:"maxduration"` // In seconds.

	// Native checks.
	Build Build `json:"build"`
	Gofmt Gofmt `json:"gofmt"`
	Test  Test  `json:"test"`

	// Checks that require prerequisites.
	Errcheck     Errcheck     `json:"errcheck"`
	Goimports    Goimports    `json:"goimports"`
	Golint       Golint       `json:"golint"`
	Govet        Govet        `json:"govet"`
	TestCoverage TestCoverage `json:"testcoverage"`

	// User configurable presubmit checks.
	CustomChecks []CustomCheck `json:"customchecks"`
}

// getConfig() returns a Config with defaults set then loads the config from
// pre-commit-go.json.
// TODO(maruel): filename is subject to change.
func getConfig() *Config {
	config := &Config{MaxDuration: 120}

	// Set defaults for native tools.
	config.Build.Enabled = true                     //
	config.Gofmt.Enabled = true                     //
	config.Test.Enabled = true                      //
	config.Test.ExtraArgs = []string{"-v", "-race"} // Enable the race detector by default.

	// Set defaults for add-on tools.
	config.Errcheck.Enabled = true    // TODO(maruel): A future version will disable this by default.
	config.Errcheck.Ignores = "Close" // "Close|Write.*|Flush|Seek|Read.*"
	config.Goimports.Enabled = true   //
	config.Golint.Enabled = true      // TODO(maruel): A future version will disable this by default.
	config.Govet.Enabled = true       // TODO(maruel): A future version will disable this by default.
	config.Govet.Blacklist = []string{" composite literal uses unkeyed fields"}
	config.TestCoverage.Enabled = true //
	config.TestCoverage.Minimum = 20.  //

	// TODO(maruel): I'd prefer to use yaml (github.com/go-yaml/yaml) but that
	// would mean slowing down go get .../pre-commit-go. Other option is to godep
	// it but go-yaml is under active development.
	content, err := ioutil.ReadFile("pre-commit-go.json")
	if err == nil {
		_ = json.Unmarshal(content, config)
	}
	out, _ := json.MarshalIndent(config, "", "  ")
	if !bytes.Equal(out, content) {
		// TODO(maruel): Return an error.
	}
	return config
}

// allChecks returns all the enabled checks.
func (c *Config) allChecks() []Check {
	out := []Check{}
	all := []Check{&c.Build, &c.Gofmt, &c.Test, &c.Errcheck, &c.Goimports, &c.Golint, &c.Govet, &c.TestCoverage}
	for i := range c.CustomChecks {
		all = append(all, &c.CustomChecks[i])
	}
	for _, c := range all {
		if c.enabled() {
			out = append(out, c)
		}
	}
	return out
}

// Commands.

// installPrereq installs all the packages needed to run the enabled checks.
func installPrereq() error {
	config := getConfig()
	var wg sync.WaitGroup
	checks := config.allChecks()
	c := make(chan string, len(checks))
	for _, check := range checks {
		for _, p := range check.prerequisites() {
			wg.Add(1)
			go func(prereq CheckPrerequisite) {
				defer wg.Done()
				_, exitCode, _ := capture(prereq.HelpCommand...)
				if exitCode != prereq.ExpectedExitCode {
					c <- prereq.URL
				}
			}(p)
		}
	}
	wg.Wait()
	loop := true
	// Use a map to remove duplicates.
	m := map[string]bool{}
	for loop {
		select {
		case url := <-c:
			m[url] = true
		default:
			loop = false
		}
	}
	urls := make([]string, 0, len(m))
	for url := range m {
		urls = append(urls, url)
	}
	sort.Strings(urls)
	if len(urls) != 0 {
		fmt.Printf("Installing:\n")
		for _, url := range urls {
			fmt.Printf("  %s\n", url)
		}

		// First try without -u, then with -u. The main reason is golint, which
		// changed its API around go1.3~1.4 time frame. -u slows things down
		// significantly so it's worth trying out without, and people will
		// generally do not like to have things upgraded behind them.
		out, _, err := capture(append([]string{"go", "get"}, urls...)...)
		if len(out) != 0 || err != nil {
			out, _, err = capture(append([]string{"go", "get", "-u"}, urls...)...)
		}
		if len(out) != 0 {
			return fmt.Errorf("prerequisites installation failed: %s", out)
		}
		if err != nil {
			return fmt.Errorf("prerequisites installation failed: %s", err)
		}
	}
	return nil
}

// install first calls installPrereq() then install the .git/hooks/pre-commit hook.
func install() error {
	if err := installPrereq(); err != nil {
		return err
	}
	gitDir, err := captureAbs("git", "rev-parse", "--git-dir")
	if err != nil {
		return fmt.Errorf("failed to find .git dir: %s", err)
	}
	// Always remove "pre-commit" first if it exists, in case it's a symlink.
	p := filepath.Join(gitDir, "hooks", "pre-commit")
	_ = os.Remove(p)
	err = ioutil.WriteFile(p, preCommitHook, 0766)
	log.Printf("installation done")
	return err
}

// run runs all the enabled checks.
func run() error {
	start := time.Now()
	config := getConfig()
	checks := config.allChecks()
	var wg sync.WaitGroup
	errs := make(chan error, len(checks))
	for _, c := range checks {
		wg.Add(1)
		go func(check Check) {
			defer wg.Done()
			log.Printf("%s...", check.name())
			start := time.Now()
			err := check.run()
			duration := time.Now().Sub(start)
			log.Printf("... %s in %1.2fs", check.name(), duration.Seconds())
			if err != nil {
				errs <- err
			}
			// A check that took too long is a check that failed.
			max := check.maxDuration()
			if max == 0 {
				max = config.MaxDuration
			}
			if duration > time.Duration(max)*time.Second {
				errs <- fmt.Errorf("check %s took %1.2fs", check.name(), duration.Seconds())
			}
		}(c)
	}
	wg.Wait()

	var err error
	for {
		select {
		case err = <-errs:
			fmt.Printf("%s\n", err)
		default:
			if err != nil {
				duration := time.Now().Sub(start)
				return fmt.Errorf("checks failed in %1.2fs", duration.Seconds())
			}
			return err
		}
	}
}

func writeConfig() error {
	config := getConfig()
	out, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return err
	}
	_ = os.Remove("pre-commit-go.json")
	return ioutil.WriteFile("pre-commit-go.json", out, 0666)
}

func mainImpl() error {
	cmd := ""
	if len(os.Args) == 1 {
		cmd = "installRun"
	} else {
		cmd = os.Args[1]
		copy(os.Args[1:], os.Args[2:])
		os.Args = os.Args[:len(os.Args)-1]
	}
	verbose := flag.Bool("verbose", false, "verbose")
	flag.Parse()

	log.SetFlags(log.Lmicroseconds)
	if !*verbose {
		log.SetOutput(ioutil.Discard)
	}

	gitRoot, err := captureAbs("git", "rev-parse", "--show-cdup")
	if err != nil {
		return fmt.Errorf("failed to find git checkout root")
	}
	if err := os.Chdir(gitRoot); err != nil {
		return fmt.Errorf("failed to chdir to git checkout root: %s", err)
	}

	if cmd == "help" || cmd == "-help" || cmd == "-h" {
		fmt.Printf(helpText)
		return nil
	}
	if cmd == "install" || cmd == "i" {
		return install()
	}
	if cmd == "installRun" {
		if err := install(); err != nil {
			return err
		}
		return run()
	}
	if cmd == "prereq" || cmd == "p" {
		return installPrereq()
	}
	if cmd == "run" || cmd == "r" {
		return run()
	}
	if cmd == "writeconfig" || cmd == "w" {
		return writeConfig()
	}
	return errors.New("unknown command")
}

func main() {
	if err := mainImpl(); err != nil {
		fmt.Fprintf(os.Stderr, "pre-commit-go: %s\n", err)
		os.Exit(1)
	}
}
